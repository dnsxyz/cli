{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Mailscript documentation Mailscript brings the best features of bots and smart contracts for email. Use our free API and CLI, in any language. No complicated setups. Example use cases Setup and route your companies email addresses based on a yaml file. See mailscript sync:export --path my-email-infra.yml for how to setup email infrastructure as code . Redirect engineering emails based on a schedule over the holidays. Mailscript workflows allow your team to edit the flow of emails in your company in one place. Integrate that weekly csv reporting email - you know the one, it comes in every week on an email as an attached csv file - it needs to be downloaded, parsed through a cleanup script and uploaded in the company reporting database. Use mailscript daemon to automate the task away. Auto-provision a new employees email address based off the Github event \u201cAdded to Team\u201d, take a look at our Github actions integration. Setup the \u201cNew Features\u201d weekly email for your app. Sync the app's user list to a Mailscript mailing list with our api , then setup a workflow for the sales team to push the latest features out to the list. Technologies Learn about the different technologies that make-up Mailscript: CLI API SDK Clients Templates Community CLI Getting started is as easy as yarn global add mailscript API It is possible to integrate Mailscript's services directly into your own projects. To do so you can interact with the API directly. The API was built using the OpenAPI Specification which allows developers to interact with the underlying abstractions directly. You can use the following API definitions file: http://api.mailscript.com/v2/swagger and we also offer a playground to try the API here: http://api.mailscript.com/v2/docs . Take into consideration that these two endpoints work with production code, so any updates you submit will update your account's configuration. SDK Clients Coming soon. We will be offering sdk clients that implement object wrappers on top of the API. Developers will be able to import/require these libraries directly into their codebases to start using Mailscript. Templates Read our templates on setting up your infrastructure and automations with Mailscript in GitHub. Pipe email attachments to an endpoint Setup the first step of a pipeline with data from email attachments: attachments to webhook . Manage your email infrastructure Version control your email infrastructure and setup a continuous integration process whenever you submit changes: email infrastructure management . Auto-reply to first time senders Let first time senders know you'll get back to them: auto-reply to first time senders . Escalate notifications Send an sms text message when the important messages arrive: [two alert messages in a minute to send sms](https://github.com/mailscript/cli/tree/main/templates/two-alerts-to-sms. Send messages to your team channels Notify your discord/slack channels when something needs their attention: run failed to discord #channel . Setup shared addresses for your team Setup a group of employees to receive messages directed to an address and have them all be able to reply from such address: shared address for teams . Community Join our public Discord , visit our GitHub , follow us on Twitter , and check out the Blog !","title":"Home"},{"location":"#welcome-to-the-mailscript-documentation","text":"Mailscript brings the best features of bots and smart contracts for email. Use our free API and CLI, in any language. No complicated setups.","title":"Welcome to the Mailscript documentation"},{"location":"#example-use-cases","text":"Setup and route your companies email addresses based on a yaml file. See mailscript sync:export --path my-email-infra.yml for how to setup email infrastructure as code . Redirect engineering emails based on a schedule over the holidays. Mailscript workflows allow your team to edit the flow of emails in your company in one place. Integrate that weekly csv reporting email - you know the one, it comes in every week on an email as an attached csv file - it needs to be downloaded, parsed through a cleanup script and uploaded in the company reporting database. Use mailscript daemon to automate the task away. Auto-provision a new employees email address based off the Github event \u201cAdded to Team\u201d, take a look at our Github actions integration. Setup the \u201cNew Features\u201d weekly email for your app. Sync the app's user list to a Mailscript mailing list with our api , then setup a workflow for the sales team to push the latest features out to the list.","title":"Example use cases"},{"location":"#technologies","text":"Learn about the different technologies that make-up Mailscript: CLI API SDK Clients Templates Community","title":"Technologies"},{"location":"#cli","text":"Getting started is as easy as yarn global add mailscript","title":"CLI"},{"location":"#api","text":"It is possible to integrate Mailscript's services directly into your own projects. To do so you can interact with the API directly. The API was built using the OpenAPI Specification which allows developers to interact with the underlying abstractions directly. You can use the following API definitions file: http://api.mailscript.com/v2/swagger and we also offer a playground to try the API here: http://api.mailscript.com/v2/docs . Take into consideration that these two endpoints work with production code, so any updates you submit will update your account's configuration.","title":"API"},{"location":"#sdk-clients","text":"Coming soon. We will be offering sdk clients that implement object wrappers on top of the API. Developers will be able to import/require these libraries directly into their codebases to start using Mailscript.","title":"SDK Clients"},{"location":"#templates","text":"Read our templates on setting up your infrastructure and automations with Mailscript in GitHub.","title":"Templates"},{"location":"#pipe-email-attachments-to-an-endpoint","text":"Setup the first step of a pipeline with data from email attachments: attachments to webhook .","title":"Pipe email attachments to an endpoint"},{"location":"#manage-your-email-infrastructure","text":"Version control your email infrastructure and setup a continuous integration process whenever you submit changes: email infrastructure management .","title":"Manage your email infrastructure"},{"location":"#auto-reply-to-first-time-senders","text":"Let first time senders know you'll get back to them: auto-reply to first time senders .","title":"Auto-reply to first time senders"},{"location":"#escalate-notifications","text":"Send an sms text message when the important messages arrive: [two alert messages in a minute to send sms](https://github.com/mailscript/cli/tree/main/templates/two-alerts-to-sms.","title":"Escalate notifications"},{"location":"#send-messages-to-your-team-channels","text":"Notify your discord/slack channels when something needs their attention: run failed to discord #channel .","title":"Send messages to your team channels"},{"location":"#setup-shared-addresses-for-your-team","text":"Setup a group of employees to receive messages directed to an address and have them all be able to reply from such address: shared address for teams .","title":"Setup shared addresses for your team"},{"location":"#community","text":"Join our public Discord , visit our GitHub , follow us on Twitter , and check out the Blog !","title":"Community"},{"location":"api/","text":"","title":"Api"},{"location":"sdk-clients/","text":"","title":"Sdk clients"},{"location":"cli/API/","text":"","title":"API"},{"location":"cli/actions/","text":"actions Configure your actions mailscript actions:add add an action USAGE $ mailscript actions:add OPTIONS -f, --forward=forward email address for forward action -h, --help show CLI help -n, --name=name (required) name of the action -r, --reply reply to incoming email -s, --subject=subject subject of the email -w, --webhook=webhook url of the webhook to call --alias=alias email address for alias action --body=body file to take webhook body from --daemon=daemon the name of the daemon to send to --from=from email address to use as sending from --headers=headers file to take webhook headers from --html=html html of the email --method=(PUT|POST|GET) [default: POST] HTTP method to use in webhook --noninteractive do not ask for user input --replyall reply all to incoming email --send=send email address for send action --sms=sms the sms number to send to --text=text text of the email mailscript actions:combine create an action by combining other actions USAGE $ mailscript actions:combine OPTIONS -h, --help show CLI help --action=action (required) Action to combine --name=name (required) the name of the new actions mailscript actions:list list the actions USAGE $ mailscript actions:list OPTIONS -h, --help show CLI help","title":"Actions"},{"location":"cli/actions/#actions","text":"Configure your actions","title":"actions"},{"location":"cli/actions/#mailscript-actionsadd","text":"add an action USAGE $ mailscript actions:add OPTIONS -f, --forward=forward email address for forward action -h, --help show CLI help -n, --name=name (required) name of the action -r, --reply reply to incoming email -s, --subject=subject subject of the email -w, --webhook=webhook url of the webhook to call --alias=alias email address for alias action --body=body file to take webhook body from --daemon=daemon the name of the daemon to send to --from=from email address to use as sending from --headers=headers file to take webhook headers from --html=html html of the email --method=(PUT|POST|GET) [default: POST] HTTP method to use in webhook --noninteractive do not ask for user input --replyall reply all to incoming email --send=send email address for send action --sms=sms the sms number to send to --text=text text of the email","title":"mailscript actions:add"},{"location":"cli/actions/#mailscript-actionscombine","text":"create an action by combining other actions USAGE $ mailscript actions:combine OPTIONS -h, --help show CLI help --action=action (required) Action to combine --name=name (required) the name of the new actions","title":"mailscript actions:combine"},{"location":"cli/actions/#mailscript-actionslist","text":"list the actions USAGE $ mailscript actions:list OPTIONS -h, --help show CLI help","title":"mailscript actions:list"},{"location":"cli/addresses/","text":"addresses Configure your email addresses mailscript addresses:add add an email address USAGE $ mailscript addresses:add OPTIONS -a, --address=address (required) the address -h, --help show CLI help mailscript addresses:delete delete an email address USAGE $ mailscript addresses:delete OPTIONS -a, --address=address (required) the address -h, --help show CLI help mailscript addresses:list list your email addresses USAGE $ mailscript addresses:list OPTIONS -h, --help show CLI help","title":"Addresses"},{"location":"cli/addresses/#addresses","text":"Configure your email addresses","title":"addresses"},{"location":"cli/addresses/#mailscript-addressesadd","text":"add an email address USAGE $ mailscript addresses:add OPTIONS -a, --address=address (required) the address -h, --help show CLI help","title":"mailscript addresses:add"},{"location":"cli/addresses/#mailscript-addressesdelete","text":"delete an email address USAGE $ mailscript addresses:delete OPTIONS -a, --address=address (required) the address -h, --help show CLI help","title":"mailscript addresses:delete"},{"location":"cli/addresses/#mailscript-addresseslist","text":"list your email addresses USAGE $ mailscript addresses:list OPTIONS -h, --help show CLI help","title":"mailscript addresses:list"},{"location":"cli/combined/","text":"Multiple triggers and actions combination Mailscript allows you to combine multiple triggers and actions to provide functionality similar to AND/OR based statements. These can be accomplished in two different fashions by the general user. Table of Contents Multiple triggers and actions combination Table of Contents YML example CLI setup Create address Create triggers Create actions Wrap it up YML example The annotated YML workflow file doubles as a combined workflow example. You can view the YML file here CLI setup The second way this can be done is through the CLI. Create address First, you need to setup a new mailscript address if you haven't done so already. mailscript addresses:add \\ --address <name of choice>@mailscript.com Create triggers Next we will configure two triggers, one that filters emails based on a subject that contains the word alert the other the word error: mailscript triggers:add \\ --name alert \\ --subjectcontains alert mailscript triggers:add \\ --name error \\ --subjectcontains error Adjust the keywords in accordance to your use case. For example if your native language is different than English, these keywords would be the corresponding word in your language. Next we must combine the two triggers. This would create a named trigger that combines the alert and error triggers. In the event an email contains a subject with the word alert or with the word error, the related action would be executed. This is using or logic to say if either of the composed triggers matches then the overall trigger matches: mailscript triggers:add \\ --name alert-or-error \\ --or alert \\ --or error If and logic was required (an email with a subject that contains alert AND error e.g. alert: error in process ), the trigger composition would be: mailscript triggers:add \\ --name alert-or-error \\ --and alert \\ --and error Create actions We take a similar approach to actions, first creating two example webhook actions, one to a normal discord team channel the other to a discord engineering channel (replace and with appropriate webhooks): mailscript actions:add \\ --name discord-team \\ --body ./body.json \\ --webhook <discord-team-channel-url> mailscript actions:add \\ --name discord-engineering \\ --body ./body.json \\ --webhook <discord-engineering-channel-url> Another example could be having one discord channel for errors and one for successes. Wrap it up We can then combine the two actions into a single action list: mailscript actions:combine \\ --name discord-team-and-engineering \\ --action discord-team \\ --action discord-engineering Finally we can create a workflow that uses the composed trigger and the combined action (replace variables and other user supplied information where neccessary): mailscript workflows:add \\ --name alerts-and-errors-to-team-and-engineering \\ --input <username>@mailscript.com \\ --action discord-team-and-engineering","title":"Multiple triggers and actions combination"},{"location":"cli/combined/#multiple-triggers-and-actions-combination","text":"Mailscript allows you to combine multiple triggers and actions to provide functionality similar to AND/OR based statements. These can be accomplished in two different fashions by the general user.","title":"Multiple triggers and actions combination"},{"location":"cli/combined/#table-of-contents","text":"Multiple triggers and actions combination Table of Contents YML example CLI setup Create address Create triggers Create actions Wrap it up","title":"Table of Contents"},{"location":"cli/combined/#yml-example","text":"The annotated YML workflow file doubles as a combined workflow example. You can view the YML file here","title":"YML example"},{"location":"cli/combined/#cli-setup","text":"The second way this can be done is through the CLI.","title":"CLI setup"},{"location":"cli/combined/#create-address","text":"First, you need to setup a new mailscript address if you haven't done so already. mailscript addresses:add \\ --address <name of choice>@mailscript.com","title":"Create address"},{"location":"cli/combined/#create-triggers","text":"Next we will configure two triggers, one that filters emails based on a subject that contains the word alert the other the word error: mailscript triggers:add \\ --name alert \\ --subjectcontains alert mailscript triggers:add \\ --name error \\ --subjectcontains error Adjust the keywords in accordance to your use case. For example if your native language is different than English, these keywords would be the corresponding word in your language. Next we must combine the two triggers. This would create a named trigger that combines the alert and error triggers. In the event an email contains a subject with the word alert or with the word error, the related action would be executed. This is using or logic to say if either of the composed triggers matches then the overall trigger matches: mailscript triggers:add \\ --name alert-or-error \\ --or alert \\ --or error If and logic was required (an email with a subject that contains alert AND error e.g. alert: error in process ), the trigger composition would be: mailscript triggers:add \\ --name alert-or-error \\ --and alert \\ --and error","title":"Create triggers"},{"location":"cli/combined/#create-actions","text":"We take a similar approach to actions, first creating two example webhook actions, one to a normal discord team channel the other to a discord engineering channel (replace and with appropriate webhooks): mailscript actions:add \\ --name discord-team \\ --body ./body.json \\ --webhook <discord-team-channel-url> mailscript actions:add \\ --name discord-engineering \\ --body ./body.json \\ --webhook <discord-engineering-channel-url> Another example could be having one discord channel for errors and one for successes.","title":"Create actions"},{"location":"cli/combined/#wrap-it-up","text":"We can then combine the two actions into a single action list: mailscript actions:combine \\ --name discord-team-and-engineering \\ --action discord-team \\ --action discord-engineering Finally we can create a workflow that uses the composed trigger and the combined action (replace variables and other user supplied information where neccessary): mailscript workflows:add \\ --name alerts-and-errors-to-team-and-engineering \\ --input <username>@mailscript.com \\ --action discord-team-and-engineering","title":"Wrap it up"},{"location":"cli/commands/","text":"mailscript Configure and manipulate email pipeline in Mailscript from the cli VERSION mailscript/0.3.27 darwin-x64 node-v14.3.0 USAGE $ mailscript [COMMAND] TOPICS actions add an action addresses configure your email addresses keys add an address key sync import/export configuration between files and Mailscript triggers add a trigger workflows configure your workflows COMMANDS daemon Run a daemon to execute scripts on email arrival help display help for mailscript login send send an email from a mailscript address usernames manipulate usernames Help mailscript help [command] - Display help for mailscript commands Version mailscript --version - Display information on the cli version currently installed See also addresses - Manipulates addresses keys - Manipulates address keys actions - Manipulates actions triggers - Manipulates triggers sync - Allows to import/export triggers, actions and workflows workflows - Manipulates workflows user - Update your user details login - Sign up or login to your account send - Send an email from one of your addresses usernames - Manipulates usernames","title":"Overview"},{"location":"cli/commands/#mailscript","text":"Configure and manipulate email pipeline in Mailscript from the cli VERSION mailscript/0.3.27 darwin-x64 node-v14.3.0 USAGE $ mailscript [COMMAND] TOPICS actions add an action addresses configure your email addresses keys add an address key sync import/export configuration between files and Mailscript triggers add a trigger workflows configure your workflows COMMANDS daemon Run a daemon to execute scripts on email arrival help display help for mailscript login send send an email from a mailscript address usernames manipulate usernames","title":"mailscript"},{"location":"cli/commands/#help","text":"mailscript help [command] - Display help for mailscript commands","title":"Help"},{"location":"cli/commands/#version","text":"mailscript --version - Display information on the cli version currently installed","title":"Version"},{"location":"cli/commands/#see-also","text":"addresses - Manipulates addresses keys - Manipulates address keys actions - Manipulates actions triggers - Manipulates triggers sync - Allows to import/export triggers, actions and workflows workflows - Manipulates workflows user - Update your user details login - Sign up or login to your account send - Send an email from one of your addresses usernames - Manipulates usernames","title":"See also"},{"location":"cli/daemon-tutorial/","text":"The Mailscript cli allows you to use your local machine, or a server, as an output for an action in a workflow. Using the mailscript daemon command you can run a local daemon that will execute a script you specify as part of a workflow and in response to an email. Setting up a daemon First register a new daemon action: mailscript actions:add --name \"action name\" --daemon \"daemon name\" We can now include the daemon in a workflow: mailscript workflows:add \\ --name \"workflow name\" \\ --trigger \"trigger name\" \\ --action \"daemon name\" Any email sent to the input and that matches the trigger, will be forwarded to the daemon listening on the daemon name action. To setup such a daemon run: mailscript daemon \\ --daemon \"daemon name\" --command \"cowsay \\$subject\" The command parameter specifies the shell script to run when the workflow sends an email to the daemon action, in this case the cowsay utility. The contents of the email are made available through the $subject and $text environment variables. The complete email object as json is passed as a string to $payload . The command will be executed each time an email is received.","title":"Daemon"},{"location":"cli/daemon-tutorial/#setting-up-a-daemon","text":"First register a new daemon action: mailscript actions:add --name \"action name\" --daemon \"daemon name\" We can now include the daemon in a workflow: mailscript workflows:add \\ --name \"workflow name\" \\ --trigger \"trigger name\" \\ --action \"daemon name\" Any email sent to the input and that matches the trigger, will be forwarded to the daemon listening on the daemon name action. To setup such a daemon run: mailscript daemon \\ --daemon \"daemon name\" --command \"cowsay \\$subject\" The command parameter specifies the shell script to run when the workflow sends an email to the daemon action, in this case the cowsay utility. The contents of the email are made available through the $subject and $text environment variables. The complete email object as json is passed as a string to $payload . The command will be executed each time an email is received.","title":"Setting up a daemon"},{"location":"cli/daemon/","text":"daemon Run scripts within a local daemon in response to emails recieved in Mailscript. mailscript daemon Run a daemon to execute scripts on email arrival USAGE $ mailscript daemon OPTIONS -h, --help show CLI help --command=command (required) The shell command to run on message received. The parts of the email will be injected as environment variable: $subject, $text, $html and $payload --daemon=daemon (required) the name of the daemon to register as","title":"Daemon"},{"location":"cli/daemon/#daemon","text":"Run scripts within a local daemon in response to emails recieved in Mailscript.","title":"daemon"},{"location":"cli/daemon/#mailscript-daemon","text":"Run a daemon to execute scripts on email arrival USAGE $ mailscript daemon OPTIONS -h, --help show CLI help --command=command (required) The shell command to run on message received. The parts of the email will be injected as environment variable: $subject, $text, $html and $payload --daemon=daemon (required) the name of the daemon to register as","title":"mailscript daemon"},{"location":"cli/develop/","text":"Table of Contents Development Publish Development In development a .env file is used: MAILSCRIPT_CONFIG_PATH=.mailscript-test # path to use for .mailscript config file MAILSCRIPT_LOGIN_URL=http://localhost:3000 # login website url MAILSCRIPT_API_SERVER=http://localhost:7000/v2 # api server url MAILSCRIPT_EMAIL_DOMAIN=mailscript.io # the domain to use when assign email addresses MAILSCRIPT_DAEMON_BRIDGE_URL=ws://localhost:8888 # the daemon bridge service To run a command: nvm use node bin/run version Publish Publishing the cli is a manual process. First check that the cli passes tests and linting: y format:check y test To publish, ensure you are on main . Then you will need the team@mailscript login to npm to publish: npm login npm version patch # or major or minor git push npm publish","title":"Table of Contents"},{"location":"cli/develop/#table-of-contents","text":"Development Publish","title":"Table of Contents"},{"location":"cli/develop/#development","text":"In development a .env file is used: MAILSCRIPT_CONFIG_PATH=.mailscript-test # path to use for .mailscript config file MAILSCRIPT_LOGIN_URL=http://localhost:3000 # login website url MAILSCRIPT_API_SERVER=http://localhost:7000/v2 # api server url MAILSCRIPT_EMAIL_DOMAIN=mailscript.io # the domain to use when assign email addresses MAILSCRIPT_DAEMON_BRIDGE_URL=ws://localhost:8888 # the daemon bridge service To run a command: nvm use node bin/run version","title":"Development"},{"location":"cli/develop/#publish","text":"Publishing the cli is a manual process. First check that the cli passes tests and linting: y format:check y test To publish, ensure you are on main . Then you will need the team@mailscript login to npm to publish: npm login npm version patch # or major or minor git push npm publish","title":"Publish"},{"location":"cli/get-started/","text":"Installation and Account Setup To create an account, you first need to install the Mailscript CLI. The CLI is where you: Manage accounts. Claim addresses. Create keys for your addresses. Create workflows for your automations. Add triggers for your workflows. Add actions for your workflows. And more. The first step is to download and install the executable. Install the CLI executable Install the CLI executable from the npm registry: mailscript with yarn global add mailscript or npm install -g mailscript Account setup The next step is to initialize an account. The CLI uses a variety of identity providers, so choose the one you prefer. mailscript login Offline support The CLI offers a secondary login flow for setups without access to a browser instance (eg. a docker container). It will have ask you to go over a login flow elsewhere and return a code to resume the sign-in process within the CLI context. mailscript login --offline Initialize If this is the first time you are signing in you'll be prompted to pick a username. Once the you've has selected a username your account setup will be complete. Addresses Addresses allow you to send and receive email messages. You receive a top level domain address corresponding to your selected username (eg. username@mailscript.com ) and you can create addresses using your username as a first level subdomain (eg. team@username.mailscript.com ) You can create an address easily: mailscript addresses:add --address address@username.mailscript.com Keys Keys allow you to share scoped access ( write and/or read ) to addresses you control with other people. Whenever you add an address a key is generated with full access for you. You can list the keys for any address you control with the following command: mailscript keys:list --address [your email address] SMTP gateway Keys with the write access can be used to setup smtp access to allow email clients to send messages from any mailscript address. To do so use the following configuration: host: smtp.mailscript.com port: 465 user: full address (eg. username@mailscript.com) pass: a key corresponding to the address with write access Next, you can start setting up workflows whenever your addresses receive an email message. Workflows Workflows allow you to setup automations when a message arrives at any of the addresses you control. A workflow consists of a trigger and an action. Whenever a trigger is met the corresponding actions will be executed. Triggers Currently mailscript allows you to set up triggers based on incoming messages to addresses you control. You can set criteria to filter specific messages to trigger actions (e.g. messages sent from a specific address, messages that include attachments, that contain specific words in the subject or body, messages that contain attachments, mailscript even allows you to set up filters matching specific headers in your email message). Triggers can be composed together to form new named triggers, allowing for the combination of criteria. See the Composing Triggers section for details. Setting up Triggers A trigger encapsulates criteria that can be used to test an incoming email. A trigger has a name and one or more criteria tests, these can include: --from : the from address equals the given value --sentto : the address the incoming email has been sent to --hasthewords : the email body contains the text specified e.g. 'alert' --domain : the incoming email has a from address with the passed domain --subjectcontains : the email subject contains the text specified --hasattachments : the email has one or more attachments To setup a trigger at the command line, provide a name and one or more criteria tests (replacing <username> ): mailscript triggers:add \\ --name example-trigger \\ --from notifications@github.com \\ --sentto github@<username>.mailscript.com \\ --hasthewords build failed \\ --domain github.com \\ --subjectcontains PR \\ --hasattachments Composing Triggers Triggers allow you to name a criteria that can be used to filter incoming emails. Triggers can be logically composed to create new triggers, allowing for the sharing of complex conditional logic. Two or more triggers can be composed together using either and or or logic: and - every criteria must be met for the composing trigger to be met or - one criteria from the or list must be met for the composing trigger to be met Assuming the following two triggers have been setup: mailscript triggers:add \\ --name alert \\ --subjectcontains alert mailscript triggers:add \\ --name error \\ --subjectcontains error We can create a new trigger that would pass if the subject contains either 'alert' or 'error' with the command: mailscript triggers:add \\ --name alert-or-error \\ --or alert \\ --or error If and logic was required (an email with a subject that contains alert AND error e.g. alert: error in process ), the trigger composition would be: mailscript triggers:add \\ --name alert-or-error \\ --and alert \\ --and error Actions Mailscript offers automation outputs based on three different kinds of actions that can happen when a trigger is met: Email actions : send a new email message, forward the received email message, redirect the message to another address and reply to the sender or all participants in the received message. SMS action : send an sms text to a specified number. Webhook action : send a request to an http endpoint. The request can be customized to suit your needs (eg. customize verbs, headers and payload; you can even use data from the received message into the delivered payload). Actions can be combined together to create a new named action; for instance, if you want an SMS to be sent and a webhook to post to discord on receiving an email at support@mycompany.mailscript.com , you can create two separate named triggers for sms and webhook and a third combined trigger that does both. Setting up Actions Email actions of all types can be created at the command line and through the api. All actions have a name, but they will have action type specific configuration options. Email Actions There are multiple email actions that can be setup to occur in response to an incoming email: forward - forward an email onto a new address as your email client would forward alias - redirect an email coming into the mailscript address to an external address, creating the effect that the email came from the originating address directly to the external address send - send a completely new email on to an external address (with the option to take parts of the triggering email over e.g. subject line) reply - respond to the incoming email, as if from the mailscript address that was sent to reply all - similar to reply but the response email is sent to everyong on the cc list as well Forward To create a forward action at the command line (replacing <username> ): mailscript actions:add \\ --name forward-to-alice \\ --forward alice@example.com \\ --from <username>@mailscript.com The forward parameter indicates the email address to forward on to. The from parameter indicates which mailscript email address the relayed email will use for its from field. Alias To create an alias action at the command line: mailscript actions:add \\ --name alias-to-personal \\ --alias myaccount@gmail.com The alias specifies the email address the incoming email will be sent on to. You must verify that you control the email address. If you have not previously verified the email address, the mailscript cli will guide you through verification when you add the alias action. Send To send on an email with subject and body you specify, you can create a send alias at the command line (replacing <username> ): mailscript actions:add \\ --name send-test \\ --send jane@example.com \\ --from <username>@mailscript.com \\ --subject \"Important: {{msg.subject}}\" \\ --text \"Please check discord for more information.\" Send creates a bespoke email as specified and sends it to the email address passed as the send parameter. The from parameter indicates the mailscript address to use for the from field. The subject line of the email is specified by the subject parameter, and has access to the string interpolation variables (i.e. {{msg.subject}} , {{msg.text}} , {{msg.html}} ). The body of the email must be specified, and can be passed either as plain test with --text or as html with --html . Reply A reply action responds back with an email to the incoming email. to create a reply action at the command line (replacing <username> ): mailscript actions:add \\ --name reply-test \\ --reply \\ --from <username>@mailscript.com \\ --text 'Out of office' The reply indicates the type of action. Text or html must be specified to be prepended to the body of the reply email, using the --text or --html parameters respectively. Reply All A reply all action responds back with an email to the from address of the incoming email and to everyone in the cc list as well. To create a reply all action at the command line (replacing <username> ): mailscript actions:add \\ --name replyall-test \\ --replyall \\ --from <username>@mailscript.com \\ --text 'Out of office' The replyall indicates the type of action. Text or html must be specified to be prepended to the body of the reply email, using the --text or --html parameters respectively. SMS Action To send an SMS message in response to an incoming message, setup an SMS action at the command line: mailscript actions:add \\ --name sms-example \\ --sms +447747111111 \\ --text 'Important: {{msg.subject}}' The phone number is provided with the sms parameters (include the international dialling code). Mailscript will ask you to verify the phone number if you have not already done so. The text parameter specifies the contents of the text and can include interpolation variables derieved from teh incoming email (e.g. {{msg.subject}} , {{msg.text}} ). Webhook Action To send an webhook in response to an incoming message, setup a Webhook action at the command line (replacing <webhook-url> ): mailscript actions:add \\ --name webhook-example \\ --webhook <webhook-url> The url endpoint that will be posted to is given by the webhook parameter. There are three optional parameters: --body the path to a file that will be passed as the body, variable interpolation is available within this file e.g. {{msg.subject}} will substitute the incoming emails subject line. --method to override the http method from the default POST --headers the path to a file of valid json that will be passed as the headers of the webhook Creating combined actions We can combine two or more named actions into a new action with the combine command: mailscript actions:combine \\ --name forward-and-sms \\ --action forward-to-alice \\ --action sms-example The combined forward-and-sms action can be used when setting up a workflow, and all subactions will be executed.","title":"Get started"},{"location":"cli/get-started/#installation-and-account-setup","text":"To create an account, you first need to install the Mailscript CLI. The CLI is where you: Manage accounts. Claim addresses. Create keys for your addresses. Create workflows for your automations. Add triggers for your workflows. Add actions for your workflows. And more. The first step is to download and install the executable.","title":"Installation and Account Setup"},{"location":"cli/get-started/#install-the-cli-executable","text":"Install the CLI executable from the npm registry: mailscript with yarn global add mailscript or npm install -g mailscript","title":"Install the CLI executable"},{"location":"cli/get-started/#account-setup","text":"The next step is to initialize an account. The CLI uses a variety of identity providers, so choose the one you prefer. mailscript login","title":"Account setup"},{"location":"cli/get-started/#offline-support","text":"The CLI offers a secondary login flow for setups without access to a browser instance (eg. a docker container). It will have ask you to go over a login flow elsewhere and return a code to resume the sign-in process within the CLI context. mailscript login --offline","title":"Offline support"},{"location":"cli/get-started/#initialize","text":"If this is the first time you are signing in you'll be prompted to pick a username. Once the you've has selected a username your account setup will be complete.","title":"Initialize"},{"location":"cli/get-started/#addresses","text":"Addresses allow you to send and receive email messages. You receive a top level domain address corresponding to your selected username (eg. username@mailscript.com ) and you can create addresses using your username as a first level subdomain (eg. team@username.mailscript.com ) You can create an address easily: mailscript addresses:add --address address@username.mailscript.com","title":"Addresses"},{"location":"cli/get-started/#keys","text":"Keys allow you to share scoped access ( write and/or read ) to addresses you control with other people. Whenever you add an address a key is generated with full access for you. You can list the keys for any address you control with the following command: mailscript keys:list --address [your email address]","title":"Keys"},{"location":"cli/get-started/#smtp-gateway","text":"Keys with the write access can be used to setup smtp access to allow email clients to send messages from any mailscript address. To do so use the following configuration: host: smtp.mailscript.com port: 465 user: full address (eg. username@mailscript.com) pass: a key corresponding to the address with write access Next, you can start setting up workflows whenever your addresses receive an email message.","title":"SMTP gateway"},{"location":"cli/get-started/#workflows","text":"Workflows allow you to setup automations when a message arrives at any of the addresses you control. A workflow consists of a trigger and an action. Whenever a trigger is met the corresponding actions will be executed.","title":"Workflows"},{"location":"cli/get-started/#triggers","text":"Currently mailscript allows you to set up triggers based on incoming messages to addresses you control. You can set criteria to filter specific messages to trigger actions (e.g. messages sent from a specific address, messages that include attachments, that contain specific words in the subject or body, messages that contain attachments, mailscript even allows you to set up filters matching specific headers in your email message). Triggers can be composed together to form new named triggers, allowing for the combination of criteria. See the Composing Triggers section for details.","title":"Triggers"},{"location":"cli/get-started/#setting-up-triggers","text":"A trigger encapsulates criteria that can be used to test an incoming email. A trigger has a name and one or more criteria tests, these can include: --from : the from address equals the given value --sentto : the address the incoming email has been sent to --hasthewords : the email body contains the text specified e.g. 'alert' --domain : the incoming email has a from address with the passed domain --subjectcontains : the email subject contains the text specified --hasattachments : the email has one or more attachments To setup a trigger at the command line, provide a name and one or more criteria tests (replacing <username> ): mailscript triggers:add \\ --name example-trigger \\ --from notifications@github.com \\ --sentto github@<username>.mailscript.com \\ --hasthewords build failed \\ --domain github.com \\ --subjectcontains PR \\ --hasattachments","title":"Setting up Triggers"},{"location":"cli/get-started/#composing-triggers","text":"Triggers allow you to name a criteria that can be used to filter incoming emails. Triggers can be logically composed to create new triggers, allowing for the sharing of complex conditional logic. Two or more triggers can be composed together using either and or or logic: and - every criteria must be met for the composing trigger to be met or - one criteria from the or list must be met for the composing trigger to be met Assuming the following two triggers have been setup: mailscript triggers:add \\ --name alert \\ --subjectcontains alert mailscript triggers:add \\ --name error \\ --subjectcontains error We can create a new trigger that would pass if the subject contains either 'alert' or 'error' with the command: mailscript triggers:add \\ --name alert-or-error \\ --or alert \\ --or error If and logic was required (an email with a subject that contains alert AND error e.g. alert: error in process ), the trigger composition would be: mailscript triggers:add \\ --name alert-or-error \\ --and alert \\ --and error","title":"Composing Triggers"},{"location":"cli/get-started/#actions","text":"Mailscript offers automation outputs based on three different kinds of actions that can happen when a trigger is met: Email actions : send a new email message, forward the received email message, redirect the message to another address and reply to the sender or all participants in the received message. SMS action : send an sms text to a specified number. Webhook action : send a request to an http endpoint. The request can be customized to suit your needs (eg. customize verbs, headers and payload; you can even use data from the received message into the delivered payload). Actions can be combined together to create a new named action; for instance, if you want an SMS to be sent and a webhook to post to discord on receiving an email at support@mycompany.mailscript.com , you can create two separate named triggers for sms and webhook and a third combined trigger that does both.","title":"Actions"},{"location":"cli/get-started/#setting-up-actions","text":"Email actions of all types can be created at the command line and through the api. All actions have a name, but they will have action type specific configuration options.","title":"Setting up Actions"},{"location":"cli/get-started/#email-actions","text":"There are multiple email actions that can be setup to occur in response to an incoming email: forward - forward an email onto a new address as your email client would forward alias - redirect an email coming into the mailscript address to an external address, creating the effect that the email came from the originating address directly to the external address send - send a completely new email on to an external address (with the option to take parts of the triggering email over e.g. subject line) reply - respond to the incoming email, as if from the mailscript address that was sent to reply all - similar to reply but the response email is sent to everyong on the cc list as well","title":"Email Actions"},{"location":"cli/get-started/#forward","text":"To create a forward action at the command line (replacing <username> ): mailscript actions:add \\ --name forward-to-alice \\ --forward alice@example.com \\ --from <username>@mailscript.com The forward parameter indicates the email address to forward on to. The from parameter indicates which mailscript email address the relayed email will use for its from field.","title":"Forward"},{"location":"cli/get-started/#alias","text":"To create an alias action at the command line: mailscript actions:add \\ --name alias-to-personal \\ --alias myaccount@gmail.com The alias specifies the email address the incoming email will be sent on to. You must verify that you control the email address. If you have not previously verified the email address, the mailscript cli will guide you through verification when you add the alias action.","title":"Alias"},{"location":"cli/get-started/#send","text":"To send on an email with subject and body you specify, you can create a send alias at the command line (replacing <username> ): mailscript actions:add \\ --name send-test \\ --send jane@example.com \\ --from <username>@mailscript.com \\ --subject \"Important: {{msg.subject}}\" \\ --text \"Please check discord for more information.\" Send creates a bespoke email as specified and sends it to the email address passed as the send parameter. The from parameter indicates the mailscript address to use for the from field. The subject line of the email is specified by the subject parameter, and has access to the string interpolation variables (i.e. {{msg.subject}} , {{msg.text}} , {{msg.html}} ). The body of the email must be specified, and can be passed either as plain test with --text or as html with --html .","title":"Send"},{"location":"cli/get-started/#reply","text":"A reply action responds back with an email to the incoming email. to create a reply action at the command line (replacing <username> ): mailscript actions:add \\ --name reply-test \\ --reply \\ --from <username>@mailscript.com \\ --text 'Out of office' The reply indicates the type of action. Text or html must be specified to be prepended to the body of the reply email, using the --text or --html parameters respectively.","title":"Reply"},{"location":"cli/get-started/#reply-all","text":"A reply all action responds back with an email to the from address of the incoming email and to everyone in the cc list as well. To create a reply all action at the command line (replacing <username> ): mailscript actions:add \\ --name replyall-test \\ --replyall \\ --from <username>@mailscript.com \\ --text 'Out of office' The replyall indicates the type of action. Text or html must be specified to be prepended to the body of the reply email, using the --text or --html parameters respectively.","title":"Reply All"},{"location":"cli/get-started/#sms-action","text":"To send an SMS message in response to an incoming message, setup an SMS action at the command line: mailscript actions:add \\ --name sms-example \\ --sms +447747111111 \\ --text 'Important: {{msg.subject}}' The phone number is provided with the sms parameters (include the international dialling code). Mailscript will ask you to verify the phone number if you have not already done so. The text parameter specifies the contents of the text and can include interpolation variables derieved from teh incoming email (e.g. {{msg.subject}} , {{msg.text}} ).","title":"SMS Action"},{"location":"cli/get-started/#webhook-action","text":"To send an webhook in response to an incoming message, setup a Webhook action at the command line (replacing <webhook-url> ): mailscript actions:add \\ --name webhook-example \\ --webhook <webhook-url> The url endpoint that will be posted to is given by the webhook parameter. There are three optional parameters: --body the path to a file that will be passed as the body, variable interpolation is available within this file e.g. {{msg.subject}} will substitute the incoming emails subject line. --method to override the http method from the default POST --headers the path to a file of valid json that will be passed as the headers of the webhook","title":"Webhook Action"},{"location":"cli/get-started/#creating-combined-actions","text":"We can combine two or more named actions into a new action with the combine command: mailscript actions:combine \\ --name forward-and-sms \\ --action forward-to-alice \\ --action sms-example The combined forward-and-sms action can be used when setting up a workflow, and all subactions will be executed.","title":"Creating combined actions"},{"location":"cli/key-concepts/","text":"Key Concepts Table of Contents Workflows Triggers Actions Daemons Workflows Workflows allow you to setup automations for any of the adddresses you control on mailscript. A workflow consists of a trigger and an action. Whenever a trigger is met the corresponding actions will be executed. Workflows are defined in YML and ideally should feel similar to writing github actions or Circle CI workflows. Not to say they are identical. See annotated-workflow for more description about the yml structure and definition. Visual example of what a workflow would look like: Triggers Currently mailscript allows you to set up triggers based criteria set for incoming emails. (eg. emails sent from a specific address, emails that include attachments, contain specific words in the subject or body, mailscript even allows you to set up filters matching specific headers in your email message!) When an incoming email meets all of the criteria the action defined in the workflow will be executed. Examples of this include sending a text message, or posting an alart to discord. Actions Mailscript offers three general actions out of the box: Email actions: This includes forwarding the received email to secondary address of choice, and replying to the sender or all participants in the received message. SMS action: send a text message to a specified number Webhook action: send a request to a custom endpoint of your choice. The request sent to the webhook endpoint includes the parsed email JSON for any secondary operations needed by the end user. Daemons The Mailscript cli allows you to use own machine, or a server, as an output for an action in a workflow. Using the mailscript daemon command you can run a local daemon that will execute a script you specify as part of a workflow. Example setting up a daemon First register a new daemon action: mailscript actions:add --name \"action name\" --daemon \"daemon name\" We can now include the daemon in a workflow: mailscript workflows:add \\ --name \"workflow name\" \\ --trigger \"trigger name\" \\ --action \"daemon name\" Any email sent to the input and that matches the trigger, will be forwarded to the daemon listening on the daemon name action. To setup such a daemon run: mailscript daemon \\ --daemon \"daemon name\" --command \"cowsay \\$subject\" The command parameter specifies the shell script to run when the workflow sends an email to the daemon action, in this case the cowsay utility. The contents of the email are made available through the $subject and $text environment variables. The command will be executed each time on each received email.","title":"Key Concepts"},{"location":"cli/key-concepts/#key-concepts","text":"","title":"Key Concepts"},{"location":"cli/key-concepts/#table-of-contents","text":"Workflows Triggers Actions Daemons","title":"Table of Contents"},{"location":"cli/key-concepts/#workflows","text":"Workflows allow you to setup automations for any of the adddresses you control on mailscript. A workflow consists of a trigger and an action. Whenever a trigger is met the corresponding actions will be executed. Workflows are defined in YML and ideally should feel similar to writing github actions or Circle CI workflows. Not to say they are identical. See annotated-workflow for more description about the yml structure and definition. Visual example of what a workflow would look like:","title":"Workflows"},{"location":"cli/key-concepts/#triggers","text":"Currently mailscript allows you to set up triggers based criteria set for incoming emails. (eg. emails sent from a specific address, emails that include attachments, contain specific words in the subject or body, mailscript even allows you to set up filters matching specific headers in your email message!) When an incoming email meets all of the criteria the action defined in the workflow will be executed. Examples of this include sending a text message, or posting an alart to discord.","title":"Triggers"},{"location":"cli/key-concepts/#actions","text":"Mailscript offers three general actions out of the box: Email actions: This includes forwarding the received email to secondary address of choice, and replying to the sender or all participants in the received message. SMS action: send a text message to a specified number Webhook action: send a request to a custom endpoint of your choice. The request sent to the webhook endpoint includes the parsed email JSON for any secondary operations needed by the end user.","title":"Actions"},{"location":"cli/key-concepts/#daemons","text":"The Mailscript cli allows you to use own machine, or a server, as an output for an action in a workflow. Using the mailscript daemon command you can run a local daemon that will execute a script you specify as part of a workflow.","title":"Daemons"},{"location":"cli/key-concepts/#example-setting-up-a-daemon","text":"First register a new daemon action: mailscript actions:add --name \"action name\" --daemon \"daemon name\" We can now include the daemon in a workflow: mailscript workflows:add \\ --name \"workflow name\" \\ --trigger \"trigger name\" \\ --action \"daemon name\" Any email sent to the input and that matches the trigger, will be forwarded to the daemon listening on the daemon name action. To setup such a daemon run: mailscript daemon \\ --daemon \"daemon name\" --command \"cowsay \\$subject\" The command parameter specifies the shell script to run when the workflow sends an email to the daemon action, in this case the cowsay utility. The contents of the email are made available through the $subject and $text environment variables. The command will be executed each time on each received email.","title":"Example setting up a daemon"},{"location":"cli/keys/","text":"keys Configure keys for your email addresses mailscript keys:add add an address key USAGE $ mailscript keys:add OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help -n, --name=name (required) the name for the key -r, --read set the key with read permissions -w, --write set the key with write permissions mailscript keys:delete delete an address key USAGE $ mailscript keys:delete OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help -k, --key=key (required) the id of the address key mailscript keys:list List the address keys for an address USAGE $ mailscript keys:list OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help mailscript keys:update update an address key USAGE $ mailscript keys:update OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help -k, --key=key (required) the id of the address key -n, --name=name (required) the name for the key -r, --read set the key with read permissions -w, --write set the key with write permissions","title":"Keys"},{"location":"cli/keys/#keys","text":"Configure keys for your email addresses","title":"keys"},{"location":"cli/keys/#mailscript-keysadd","text":"add an address key USAGE $ mailscript keys:add OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help -n, --name=name (required) the name for the key -r, --read set the key with read permissions -w, --write set the key with write permissions","title":"mailscript keys:add"},{"location":"cli/keys/#mailscript-keysdelete","text":"delete an address key USAGE $ mailscript keys:delete OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help -k, --key=key (required) the id of the address key","title":"mailscript keys:delete"},{"location":"cli/keys/#mailscript-keyslist","text":"List the address keys for an address USAGE $ mailscript keys:list OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help","title":"mailscript keys:list"},{"location":"cli/keys/#mailscript-keysupdate","text":"update an address key USAGE $ mailscript keys:update OPTIONS -a, --address=address (required) the email address to look for keys against -h, --help show CLI help -k, --key=key (required) the id of the address key -n, --name=name (required) the name for the key -r, --read set the key with read permissions -w, --write set the key with write permissions","title":"mailscript keys:update"},{"location":"cli/login/","text":"login Sign up or login to your account mailscript login link or create your MailScript account USAGE $ mailscript login OPTIONS -o, --offline DESCRIPTION Link or create your MailScript account","title":"Login"},{"location":"cli/login/#login","text":"Sign up or login to your account","title":"login"},{"location":"cli/login/#mailscript-login","text":"link or create your MailScript account USAGE $ mailscript login OPTIONS -o, --offline DESCRIPTION Link or create your MailScript account","title":"mailscript login"},{"location":"cli/misc/","text":"Misc: mailscript login mailscript daemon mailscript send [FILE] mailscript --version login Sign up or login to your account mailscript login link or create your MailScript account USAGE $ mailscript login OPTIONS -o, --offline DESCRIPTION Link or create your MailScript account daemon Run scripts within a local daemon in response to emails recieved in Mailscript. mailscript daemon Run a daemon to execute scripts on email arrival USAGE $ mailscript daemon OPTIONS -h, --help show CLI help --command=command (required) The shell command to run on message received. The parts of the email will be injected as environment variable: $subject, $text, $html and $payload --daemon=daemon (required) the name of the daemon to register as send Send an email from one of your addresses mailscript send [FILE] send an email from a mailscript address USAGE $ mailscript send [FILE] OPTIONS -b, --text=text text of email -f, --from=from (required) email address to use for sending -h, --help show CLI help -s, --subject=subject (required) subject line of email -t, --to=to (required) email address to send to Help mailscript help [command] - Display help for mailscript commands Version mailscript --version - Display information on the cli version currently installed","title":"Misc"},{"location":"cli/misc/#login","text":"Sign up or login to your account","title":"login"},{"location":"cli/misc/#mailscript-login","text":"link or create your MailScript account USAGE $ mailscript login OPTIONS -o, --offline DESCRIPTION Link or create your MailScript account","title":"mailscript login"},{"location":"cli/misc/#daemon","text":"Run scripts within a local daemon in response to emails recieved in Mailscript.","title":"daemon"},{"location":"cli/misc/#mailscript-daemon","text":"Run a daemon to execute scripts on email arrival USAGE $ mailscript daemon OPTIONS -h, --help show CLI help --command=command (required) The shell command to run on message received. The parts of the email will be injected as environment variable: $subject, $text, $html and $payload --daemon=daemon (required) the name of the daemon to register as","title":"mailscript daemon"},{"location":"cli/misc/#send","text":"Send an email from one of your addresses","title":"send"},{"location":"cli/misc/#mailscript-send-file","text":"send an email from a mailscript address USAGE $ mailscript send [FILE] OPTIONS -b, --text=text text of email -f, --from=from (required) email address to use for sending -h, --help show CLI help -s, --subject=subject (required) subject line of email -t, --to=to (required) email address to send to","title":"mailscript send [FILE]"},{"location":"cli/misc/#help","text":"mailscript help [command] - Display help for mailscript commands","title":"Help"},{"location":"cli/misc/#version","text":"mailscript --version - Display information on the cli version currently installed","title":"Version"},{"location":"cli/readme/","text":"Mailscript CLI Table of Contents Mailscript CLI Table of Contents Notes Examples Overview Commands Configuration Notes See getting key concepts for more info about how mailscript works. When ready take a look at the get started page Examples Example YML workflow Combined triggers and actions Email to google spreadsheet Github action failure email to notification Overview In order to use the mailscript CLI must first install it wth the global flag. Run the following... **Login local daemon** ```sh-session $ mailscript login ... You should see a browser window open prompting you to login to your mailscript account. Configure and manipulate email pipeline in Mailscript from the cli VERSION mailscript/0.4.9 win32-x64 node-v12.18.0 USAGE $ mailscript [COMMAND] TOPICS actions add an action addresses configure your email addresses keys add an address key sync import/export configuration between files and Mailscript triggers add a trigger workflows configure your workflows COMMANDS daemon Run a daemon to execute scripts on email arrival help display help for mailscript login send send an email from a mailscript address Commands mailscript actions Actions are what gets executed in response to a predetermined triggered. This can be sending a text message, forwarding the email, or ignoring the email entirely to a name few. Click the link above to see full list of available sub commands. mailscript addresses This is where you would manage all of your mailscript addresses. Listing out created addresses, creating new addresses and deleting addresses no longer in use. Click the link above to see full list of available sub commands. * mailscript daemon Run a local email processing daemon. Useful for custom made email processing software. mailscript help [COMMAND] mailscript keys Manage SMTP credientials for redirecting emails from your own email address to mailscript. Click the link above to see full list of available sub commands. mailscript login mailscript send [FILE] Sends an email from your mailscript address mailscript sync:export mailscript sync:import Import/export configuration to and from mailscript. mailscript triggers Manage triggers. Triggers are rule sets which help mailscript know where to redirect an email to. Triggers are combined with actions to create a workflow. Click the link above to see full list of available sub commands. mailscript workflows *Manage workflows. Workflows are a conjunction of actions and triggers defining the filter -> action relationship. They also include other metadata such as specifiying a different email address. It is possible to have multiple email addresses and workflows on the same account. Click the link above to see full list of available sub commands. Configuration The mailscript CLI saves a configuration file at the follow location for windows, macOSX and Linux. In the event this must be removed for whatever reason the default location is available here. Windows: /Users/<Username>/.mailscript Linux: ~/.mailscript MacOSX: ~/.mailscript","title":"Mailscript CLI"},{"location":"cli/readme/#mailscript-cli","text":"","title":"Mailscript CLI"},{"location":"cli/readme/#table-of-contents","text":"Mailscript CLI Table of Contents Notes Examples Overview Commands Configuration","title":"Table of Contents"},{"location":"cli/readme/#notes","text":"See getting key concepts for more info about how mailscript works. When ready take a look at the get started page","title":"Notes"},{"location":"cli/readme/#examples","text":"Example YML workflow Combined triggers and actions Email to google spreadsheet Github action failure email to notification","title":"Examples"},{"location":"cli/readme/#overview","text":"In order to use the mailscript CLI must first install it wth the global flag. Run the following... **Login local daemon** ```sh-session $ mailscript login ... You should see a browser window open prompting you to login to your mailscript account. Configure and manipulate email pipeline in Mailscript from the cli VERSION mailscript/0.4.9 win32-x64 node-v12.18.0 USAGE $ mailscript [COMMAND] TOPICS actions add an action addresses configure your email addresses keys add an address key sync import/export configuration between files and Mailscript triggers add a trigger workflows configure your workflows COMMANDS daemon Run a daemon to execute scripts on email arrival help display help for mailscript login send send an email from a mailscript address","title":"Overview"},{"location":"cli/readme/#commands","text":"mailscript actions Actions are what gets executed in response to a predetermined triggered. This can be sending a text message, forwarding the email, or ignoring the email entirely to a name few. Click the link above to see full list of available sub commands. mailscript addresses This is where you would manage all of your mailscript addresses. Listing out created addresses, creating new addresses and deleting addresses no longer in use. Click the link above to see full list of available sub commands. * mailscript daemon Run a local email processing daemon. Useful for custom made email processing software. mailscript help [COMMAND] mailscript keys Manage SMTP credientials for redirecting emails from your own email address to mailscript. Click the link above to see full list of available sub commands. mailscript login mailscript send [FILE] Sends an email from your mailscript address mailscript sync:export mailscript sync:import Import/export configuration to and from mailscript. mailscript triggers Manage triggers. Triggers are rule sets which help mailscript know where to redirect an email to. Triggers are combined with actions to create a workflow. Click the link above to see full list of available sub commands. mailscript workflows *Manage workflows. Workflows are a conjunction of actions and triggers defining the filter -> action relationship. They also include other metadata such as specifiying a different email address. It is possible to have multiple email addresses and workflows on the same account. Click the link above to see full list of available sub commands.","title":"Commands"},{"location":"cli/readme/#configuration","text":"The mailscript CLI saves a configuration file at the follow location for windows, macOSX and Linux. In the event this must be removed for whatever reason the default location is available here. Windows: /Users/<Username>/.mailscript Linux: ~/.mailscript MacOSX: ~/.mailscript","title":"Configuration"},{"location":"cli/send/","text":"send Send an email from one of your addresses mailscript send [FILE] send an email from a mailscript address USAGE $ mailscript send [FILE] OPTIONS -b, --text=text text of email -f, --from=from (required) email address to use for sending -h, --help show CLI help -s, --subject=subject (required) subject line of email -t, --to=to (required) email address to send to","title":"Send"},{"location":"cli/send/#send","text":"Send an email from one of your addresses","title":"send"},{"location":"cli/send/#mailscript-send-file","text":"send an email from a mailscript address USAGE $ mailscript send [FILE] OPTIONS -b, --text=text text of email -f, --from=from (required) email address to use for sending -h, --help show CLI help -s, --subject=subject (required) subject line of email -t, --to=to (required) email address to send to","title":"mailscript send [FILE]"},{"location":"cli/sync/","text":"sync import/export configuration between files and Mailscript mailscript sync:export export your Mailscript config to file USAGE $ mailscript sync:export OPTIONS -h, --help show CLI help -p, --path=path path to the file to read/write mailscript sync:import import and update config from file into Mailscript USAGE $ mailscript sync:import OPTIONS -d, --delete force delete of entities missing from import file -h, --help show CLI help -p, --path=path (required) path to the file to read/write --noninteractive do not ask for user input","title":"Sync"},{"location":"cli/sync/#sync","text":"import/export configuration between files and Mailscript","title":"sync"},{"location":"cli/sync/#mailscript-syncexport","text":"export your Mailscript config to file USAGE $ mailscript sync:export OPTIONS -h, --help show CLI help -p, --path=path path to the file to read/write","title":"mailscript sync:export"},{"location":"cli/sync/#mailscript-syncimport","text":"import and update config from file into Mailscript USAGE $ mailscript sync:import OPTIONS -d, --delete force delete of entities missing from import file -h, --help show CLI help -p, --path=path (required) path to the file to read/write --noninteractive do not ask for user input","title":"mailscript sync:import"},{"location":"cli/triggers/","text":"triggers Configure your triggers mailscript triggers:add add a trigger USAGE $ mailscript triggers:add OPTIONS -h, --help show CLI help -n, --name=name (required) name of the trigger --and=and combine sub-triggers into a new trigger with \"and\" logic --domain=domain constrain trigger to emails are from an email address with the given domain --equals=equals the value used against the property param --exists whether the property param exists --firsttimesender constrain trigger to emails that are the first seen from the sending address --from=from constrain trigger to emails from the specified address --hasattachments constrain trigger to emails with attachments --hasthewords=hasthewords constrain trigger to emails that have the words specified --not invert the property param match --or=or combine sub-triggers into a new trigger with \"or\" logic --property=property constrain trigger to emails where the property matches, use with --equals --seconds=seconds period of time to calculate the trigger over --sentto=sentto constrain trigger to emails sent to the specified address --subjectcontains=subjectcontains constrain trigger to emails whose subject contains the specified text --times=times number of emails in a period for trigger to activate mailscript triggers:delete delete a trigger USAGE $ mailscript triggers:delete OPTIONS -h, --help show CLI help -t, --trigger=trigger (required) id of the trigger to be acted on mailscript trigger:list list the triggers USAGE $ mailscript triggers:list OPTIONS -h, --help show CLI help","title":"Triggers"},{"location":"cli/triggers/#triggers","text":"Configure your triggers","title":"triggers"},{"location":"cli/triggers/#mailscript-triggersadd","text":"add a trigger USAGE $ mailscript triggers:add OPTIONS -h, --help show CLI help -n, --name=name (required) name of the trigger --and=and combine sub-triggers into a new trigger with \"and\" logic --domain=domain constrain trigger to emails are from an email address with the given domain --equals=equals the value used against the property param --exists whether the property param exists --firsttimesender constrain trigger to emails that are the first seen from the sending address --from=from constrain trigger to emails from the specified address --hasattachments constrain trigger to emails with attachments --hasthewords=hasthewords constrain trigger to emails that have the words specified --not invert the property param match --or=or combine sub-triggers into a new trigger with \"or\" logic --property=property constrain trigger to emails where the property matches, use with --equals --seconds=seconds period of time to calculate the trigger over --sentto=sentto constrain trigger to emails sent to the specified address --subjectcontains=subjectcontains constrain trigger to emails whose subject contains the specified text --times=times number of emails in a period for trigger to activate","title":"mailscript triggers:add"},{"location":"cli/triggers/#mailscript-triggersdelete","text":"delete a trigger USAGE $ mailscript triggers:delete OPTIONS -h, --help show CLI help -t, --trigger=trigger (required) id of the trigger to be acted on","title":"mailscript triggers:delete"},{"location":"cli/triggers/#mailscript-triggerlist","text":"list the triggers USAGE $ mailscript triggers:list OPTIONS -h, --help show CLI help","title":"mailscript trigger:list"},{"location":"cli/user/","text":"user Update your user details mailscript user:update Set the display name used in the from address when sending emails. USAGE $ mailscript user:update OPTIONS -d, --displayname=displayname (required) the display name to use when sending emails","title":"User"},{"location":"cli/user/#user","text":"Update your user details","title":"user"},{"location":"cli/user/#mailscript-userupdate","text":"Set the display name used in the from address when sending emails. USAGE $ mailscript user:update OPTIONS -d, --displayname=displayname (required) the display name to use when sending emails","title":"mailscript user:update"},{"location":"cli/workflows/","text":"workflows Configure your workflows mailscript workflows:add add a workflow USAGE $ mailscript workflows:add OPTIONS -a, --action=action (required) name of the action accessory -h, --help show CLI help -n, --name=name (required) name of the workflow -o, --input=input (required) name of the input -t, --trigger=trigger name of the trigger accessory --workflow=workflow id of the workflow to be acted on mailscript workflows:delete delete a workflow USAGE $ mailscript workflows:delete OPTIONS -h, --help show CLI help -w, --workflow=workflow (required) id of the workflow to be acted on mailscript workflows:list list the workflows USAGE $ mailscript workflows:list","title":"Workflows"},{"location":"cli/workflows/#workflows","text":"Configure your workflows","title":"workflows"},{"location":"cli/workflows/#mailscript-workflowsadd","text":"add a workflow USAGE $ mailscript workflows:add OPTIONS -a, --action=action (required) name of the action accessory -h, --help show CLI help -n, --name=name (required) name of the workflow -o, --input=input (required) name of the input -t, --trigger=trigger name of the trigger accessory --workflow=workflow id of the workflow to be acted on","title":"mailscript workflows:add"},{"location":"cli/workflows/#mailscript-workflowsdelete","text":"delete a workflow USAGE $ mailscript workflows:delete OPTIONS -h, --help show CLI help -w, --workflow=workflow (required) id of the workflow to be acted on","title":"mailscript workflows:delete"},{"location":"cli/workflows/#mailscript-workflowslist","text":"list the workflows USAGE $ mailscript workflows:list","title":"mailscript workflows:list"}]}