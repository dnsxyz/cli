name: codecov

on:
  push:
    branches:
      - main

jobs:
  run:
    runs-on: ubuntu-18.04 # IMPORTANT!!! this LINUX os should be the same as in build-and-test and release workflows! this is for making sure caches are used in most efficient way

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2.3.4

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: '12'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2.1.3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ubuntu-18.04-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ubuntu-18.04-yarn-
      #- name: Change Directory
      #  run: cd packages/main
      - name: Install
        run: yarn
        
      - name: npm install -g codecov
        run:  npm install -g codecov

      - name: npm run test
        run: npm run test

      - name: npm run coverage
        run: npm run coverage

      #- name: Upload app coverage to Codecov
      #  uses: codecov/codecov-action@v1.0.12
      #  with:
      #    token: ${{ secrets.CODECOV_TOKEN }}
      #    file: ./coverage/clover.xml
      #    flags: unittests
      #    name: codecov-umbrella
      #    fail_ci_if_error: true